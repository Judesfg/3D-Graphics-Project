#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  vec3 direction;
  float cutoff;
};

uniform Light light;  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 result;
vec3 lightDir;

void main() {
  // ambient
  vec3 ambient = light.ambient * texture(first_texture, aTexCoord).rgb;
  
  lightDir = normalize(light.position - aPos); 
  float theta = dot(lightDir, normalize(-light.direction));

  if (theta > light.cutoff) {
    // diffuse
    vec3 norm = normalize(aNormal);
    
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(first_texture, aTexCoord).rgb;
    
    // specular 
    vec3 viewDir = normalize(viewPos - aPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * material.specular;

    result = ambient + diffuse + specular;
  }
  else{
    result = ambient;    
  }

  fragColor = vec4(result, 1.0);
}